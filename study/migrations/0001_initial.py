# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-05-08 18:09
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import study.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'city',
                'verbose_name_plural': 'cities',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='company name')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='address')),
                ('phone', models.IntegerField(blank=True, null=True, verbose_name='phone')),
                ('email', models.CharField(blank=True, max_length=100, null=True, verbose_name='email')),
                ('link', models.CharField(blank=True, max_length=100, null=True, verbose_name='link')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'company',
                'verbose_name_plural': 'companies',
            },
        ),
        migrations.CreateModel(
            name='Comparators',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form', models.CharField(max_length=100, verbose_name='form')),
                ('doze', models.CharField(blank=True, max_length=100, null=True, verbose_name='doze')),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True, verbose_name='manufacturer')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='country')),
            ],
            options={
                'verbose_name': 'comparator',
                'verbose_name_plural': 'comparators',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='condition name')),
                ('description', models.TextField(blank=True, max_length=4096, null=True, verbose_name='description')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'condition',
                'verbose_name_plural': 'conditions',
            },
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'contacts',
                'verbose_name_plural': 'contacts',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'contry',
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='disease name')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'disease',
                'verbose_name_plural': 'diseases',
            },
        ),
        migrations.CreateModel(
            name='Eligibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('age', models.PositiveIntegerField(blank=True, null=True, verbose_name='age')),
                ('gender', models.CharField(blank=True, choices=[('Female and Male', 'Female and Male'), ('Female', 'Female'), ('Male', 'Male')], max_length=20, null=True, verbose_name='gender')),
                ('healthy_volunteers', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='healthy volunteers')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'eligibility',
                'verbose_name_plural': 'eligibility',
            },
        ),
        migrations.CreateModel(
            name='ExclusionCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'exclusion criteria',
                'verbose_name_plural': 'exclusion criteria',
            },
        ),
        migrations.CreateModel(
            name='GeneralInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name=study.models.TherapeuticArea)),
                ('protocol_title', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='protocol title')),
                ('detail_description', models.TextField(blank=True, null=True, verbose_name='detailed description')),
                ('phase', models.CharField(blank=True, choices=[('I', 'I'), ('I/II', 'I/II'), ('I/III', 'I/III'), ('II', 'II'), ('II/III', 'II/III'), ('III', 'III'), ('III/IV', 'III/IV'), ('IV', 'IV')], max_length=10, null=True, verbose_name='phase')),
                ('study_type', models.CharField(blank=True, choices=[('Interventional', 'Interventional'), ('Non-Interventional', 'Non-Interventional')], max_length=10, null=True, verbose_name='study type')),
                ('study_design', models.CharField(blank=True, choices=[('Allocation', 'Allocation'), ('Endpoint Classification', 'Endpoint Classification'), ('Intervention Model', 'Intervention model'), ('Masking', 'Masking'), ('Primary Purpose', 'Primary purpose')], max_length=10, null=True, verbose_name='study design')),
                ('purpose', models.CharField(blank=True, max_length=100, null=True, verbose_name='purpose')),
                ('decease_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Disease', verbose_name='decease_name')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'general information',
                'verbose_name_plural': 'general information',
            },
        ),
        migrations.CreateModel(
            name='HeadOfDepartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'head of department',
                'verbose_name_plural': 'head of department',
            },
        ),
        migrations.CreateModel(
            name='InclusionCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'inclusion criteria',
                'verbose_name_plural': 'inclusion criteria',
            },
        ),
        migrations.CreateModel(
            name='InvestigationProducts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form', models.CharField(max_length=100)),
                ('doze', models.CharField(blank=True, max_length=100)),
                ('manufacturer', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'investigation product',
                'verbose_name_plural': 'investigation products',
            },
        ),
        migrations.CreateModel(
            name='Materials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('comparators', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Comparators', verbose_name='comparators')),
                ('investigation_products', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.InvestigationProducts', verbose_name='investigation_products')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'material',
                'verbose_name_plural': 'materials',
            },
        ),
        migrations.CreateModel(
            name='MedicalInstitutionPhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
                ('info_desk', models.CharField(blank=True, max_length=20, null=True, verbose_name='information desk')),
                ('registration_desk', models.CharField(blank=True, max_length=20, null=True, verbose_name='registration desk')),
                ('receptions_ward', models.CharField(blank=True, max_length=20, null=True, verbose_name='reception ward')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone number')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'medical institution phone number',
                'verbose_name_plural': 'medical institution phone numbers',
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(blank=True, choices=[('Autonomous Republic of Crimea', 'Autonomous Republic of Crimea'), ('Cherkaska', 'Cherkaska'), ('Chernihivska', 'Chernihivska'), ('Chernivetska', 'Chernivetska'), ('Dnipropetrovska', 'Dnipropetrovska'), ('Donetska', 'Donetska'), ('Ivano-Frankivska', 'Ivano-Frankivska'), ('Kharkivska', 'Kharkivska'), ('Khersonska', 'Khersonska'), ('Khmelnytska', 'Khmelnytska'), ('Kirovohradska', 'Kirovohradska'), ('Kyiv', 'Kyiv'), ('Kyivska', 'Kyivska'), ('Luhanska', 'Luhanska'), ('Lvivska', 'Lvivska'), ('Mykolayivska', 'Mykolayivska'), ('Odeska', 'Odeska'), ('Poltavska', 'Poltavska'), ('Rivnenska', 'Rivnenska'), ('Sumska', 'Sumska'), ('Ternopilska', 'Ternopilska'), ('Vinnytska', 'Vinnytska'), ('Volynska', 'Volynska'), ('Zakarpatska', 'Zakarpatska'), ('Zaporizka', 'Zaporizka'), ('Zhytomyrska', 'Zhytomyrska')], max_length=20, null=True, verbose_name='region')),
                ('principal_investigator_phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='principal investigator phone number')),
                ('medical_institution', models.CharField(blank=True, max_length=100, null=True, verbose_name='medical institution')),
                ('medical_institution_department', models.CharField(blank=True, max_length=100, null=True, verbose_name='medical institution department')),
                ('site', models.CharField(blank=True, max_length=100, null=True, verbose_name='site')),
                ('medical_institution_department_phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='medical institution department phone number')),
                ('medical_institution_department_fax', models.CharField(blank=True, max_length=20, null=True, verbose_name='medical institution department fax')),
                ('medical_educational_institution', models.CharField(blank=True, max_length=100, null=True, verbose_name='medical educational institution')),
                ('medical_educational_institution_department', models.CharField(blank=True, max_length=100, null=True, verbose_name='medical educational institution department')),
                ('medical_institution_contact_person_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='medical institution contact person name')),
                ('company_contact_person_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='company contact person name')),
                ('contact_person_phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='conact person phone number')),
                ('contact_person_fax', models.CharField(blank=True, max_length=20, null=True, verbose_name='conact person fax')),
                ('contact_person_email', models.CharField(blank=True, max_length=100, null=True, verbose_name='conact person email')),
                ('recruiting_status_clinicaltrials', models.CharField(blank=True, choices=[('Not recruiting yet', 'Not recruiting yet'), ('Recruiting', 'Recruiting'), ('Not recriuting', 'Not recruiting')], max_length=20, null=True, verbose_name='recruiting status clinicaltrials')),
                ('recruiting_status_moh', models.CharField(blank=True, choices=[('Not recruiting yet', 'Not recruiting yet'), ('Recruiting', 'Recruiting'), ('Not recriuting', 'Not recruiting')], default=None, max_length=20, null=True, verbose_name='recruiting status MOH of Ukraine')),
                ('recruiting_status_company', models.CharField(blank=True, choices=[('Not recruiting yet', 'Not recruiting yet'), ('Recruiting', 'Recruiting'), ('Not recriuting', 'Not recruiting')], default=None, max_length=20, null=True, verbose_name='recruiting status company')),
            ],
            options={
                'verbose_name': 'place',
                'verbose_name_plural': 'places',
            },
        ),
        migrations.CreateModel(
            name='PlaceAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveIntegerField(blank=True, null=True, verbose_name='index')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='city')),
                ('settle_type', models.CharField(blank=True, choices=[('City', 'City'), ('Village', 'Village')], max_length=10, null=True, verbose_name='inhabited locality')),
                ('street_type', models.CharField(blank=True, choices=[('Street', 'Street'), ('Square', 'Square'), ('Boulevard', 'Boulevard'), ('Lane', 'Lane'), ('Avenue', 'Avenue')], max_length=10, null=True, verbose_name='street type')),
                ('street', models.CharField(blank=True, max_length=50, null=True, verbose_name='street name')),
                ('building', models.CharField(blank=True, max_length=20, null=True, verbose_name='building number')),
            ],
            options={
                'verbose_name': 'place address',
                'verbose_name_plural': 'place addresses',
            },
        ),
        migrations.CreateModel(
            name='PrincipalInvestigator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
                ('position', models.CharField(blank=True, choices=[('Head of department', 'Head of department'), ('Candidate of Medical Sciences', 'Candidate of Medical Sciences'), ('Candidate of Biological Sciences', 'Candidate of Biological Sciences'), ('Candidate of Philosophical Sciences', 'Candidate of Philosophical Sciences'), ('Doctor of Medicine (M.D.)', 'Doctor of Medicine (M.D.)'), ('Doctor of Biological Sciences', 'Doctor of Biological Sciences'), ('Doctor of Philosophy (PhD)', 'Doctor of Philosophy (PhD)'), ('Professor', 'Professor'), ('Academician', 'Academician'), ('PhD (Doctor of Pharmacy)', 'PhD (Doctor of Pharmacy)')], max_length=20, null=True, verbose_name='position')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'principal investigator',
                'verbose_name_plural': 'principal investigators',
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='sponsor name')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='address')),
                ('phone', models.IntegerField(blank=True, null=True, verbose_name='phone')),
                ('email', models.CharField(blank=True, max_length=100, null=True, verbose_name='email')),
                ('link', models.CharField(blank=True, max_length=100, null=True, verbose_name='link')),
            ],
        ),
        migrations.CreateModel(
            name='StudyIdentifiers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sponsor_protocol_number', models.CharField(blank=True, max_length=100, null=True, verbose_name="Sponsor's protocol number")),
                ('clinical_trials_com_ua_identifier', models.CharField(blank=True, max_length=100, null=True, verbose_name='ClinicalTrials.com.ua Identifier')),
                ('clinical_trials_gov_identifier', models.CharField(blank=True, max_length=100, null=True, verbose_name='ClinicalTrials.gov Identifier')),
                ('clinical_trials_gov_link', models.CharField(blank=True, max_length=200, null=True, verbose_name='ClinicalTrials.gov link')),
                ('eudract', models.CharField(blank=True, max_length=100, null=True, verbose_name='EudraCT number')),
                ('eudract_link', models.CharField(blank=True, max_length=200, null=True, verbose_name='EudraCT link')),
                ('moh_of_ukraine', models.CharField(blank=True, max_length=100, null=True, verbose_name='MOH of Ukraine')),
                ('moh_of_ukraine_link', models.CharField(blank=True, max_length=200, null=True, verbose_name='MOH of Ukraine link')),
                ('estimated_enrollment_clinicaltrials_overall', models.IntegerField(blank=True, null=True, verbose_name='Estimated enrollment in general according to clinicaltrials.com')),
                ('estimated_enrollment_moh_ukraine_overall', models.IntegerField(blank=True, null=True, verbose_name='Estimated enrollment in general according to MOH of Ukraine')),
                ('estimated_enrollment_company_overall', models.IntegerField(blank=True, null=True, verbose_name='Estimated enrollment in general according to "Company"')),
                ('estimated_enrollment_moh_ukraine', models.IntegerField(blank=True, null=True, verbose_name='Estimated enrollment in Ukraine according to MOH of Ukraine')),
                ('estimated_enrollment_company', models.IntegerField(blank=True, null=True, verbose_name='Estimated enrollment in Ukraine according to "Company"')),
                ('enrollment_start_date_ukraine', models.DateTimeField(blank=True, null=True, verbose_name='start date of enrolling patients in Ukraine')),
                ('study_status', models.CharField(choices=[('Not recruiting yet', 'Not recruiting yet'), ('Recruiting', 'Recruiting'), ('On invitation recruiting', 'Invitation needed'), ('Not recruiting', 'Not recruiting'), ('Study end', 'Study finished'), ('Study pause', 'Study paused'), ('Study terminated before recruiting', 'Study ended before recruiting'), ('Study status unknown', 'Unknown study status'), ('Not healthy recruits', 'Recruits with decease only')], default=None, max_length=10, null=True, verbose_name='study status')),
                ('last_day_date', models.DateTimeField(blank=True, null=True, verbose_name='study completion date')),
                ('last_updated_date', models.DateTimeField(blank=True, null=True, verbose_name='last updated date')),
                ('sponsor_card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Sponsor', verbose_name='sponsor')),
            ],
            options={
                'verbose_name': 'study identifier',
                'verbose_name_plural': 'study identifiers',
            },
        ),
        migrations.CreateModel(
            name='StudyRelatedMaterials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True, verbose_name='manufacturer')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='country')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'study related material',
                'verbose_name_plural': 'study related materials',
            },
        ),
        migrations.CreateModel(
            name='TherapeuticArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Choose condition', 'Choose condition'), ('Andrology', 'Andrology'), ('Asthma & Allergy', 'Asthma & Allergy'), ('Cardiology & Vascular Diseases', 'Cardiology & Vascular Diseases'), ('Dermatology', 'Dermatology'), ('Dentistry', 'Dentistry'), ('Endocrinology', 'Endocrinology'), ('Gastroentorology', 'Gastroentorology'), ('Gerontology & Geriatrics', 'Gerontology & Geriatrics'), ('Healthy Volunteers', 'Healthy Volunteers'), ('Hematology', 'Hematology'), ('Hepatoogy', 'Hepatoogy'), ('Immunology', 'Immunology'), ('Infectious Diseases', 'Infectious Diseases'), ('Medical Device', 'Medical Device'), ('Neurology', 'Neurology'), ('Nephrology', 'Nephrology'), ('Obstetrics & Gynaecology (OB&GYN)', 'Obstetrics & Gynaecology (OB&GYN)'), ('Oncology', 'Oncology'), ('Ophthalmology', 'Ophthalmology'), ('Otorhinolaryngology', 'Otorhinolaryngology'), ('Pediatrics', 'Pediatrics'), ('Plastic Surgery', 'Plastic Surgery'), ('Psychiatry', 'Psychiatry'), ('Pulmonology', 'Pulmonology'), ('Reproductive Medicine', 'Reproductive Medicine'), ('Rheumatology', 'Rheumatology'), ('Surgery', 'Surgery'), ('Traumatology', 'Traumatology'), ('Urology', 'Urology'), ('Venerology', 'Venerology')], default='TRERAPEUTIC_AREA', max_length=100, verbose_name='decease name')),
            ],
            options={
                'verbose_name': 'therapeutic area',
                'verbose_name_plural': 'therapeutic areas',
            },
        ),
        migrations.AddField(
            model_name='place',
            name='address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.PlaceAddress', verbose_name='address'),
        ),
        migrations.AddField(
            model_name='place',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.City', verbose_name='city'),
        ),
        migrations.AddField(
            model_name='place',
            name='head_of_department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.HeadOfDepartment', verbose_name='head of department'),
        ),
        migrations.AddField(
            model_name='place',
            name='phone_number',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.MedicalInstitutionPhoneNumber', verbose_name='phone number'),
        ),
        migrations.AddField(
            model_name='place',
            name='principal_investigator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.PrincipalInvestigator', verbose_name='principal investigator'),
        ),
        migrations.AddField(
            model_name='materials',
            name='study_related_materials',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.StudyRelatedMaterials', verbose_name='study related materials'),
        ),
        migrations.AddField(
            model_name='eligibility',
            name='exclusion_criteria',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.ExclusionCriteria', verbose_name='exclusion criteria'),
        ),
        migrations.AddField(
            model_name='eligibility',
            name='inclusion_criteria',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.InclusionCriteria', verbose_name='inclusion criteria'),
        ),
        migrations.AddField(
            model_name='disease',
            name='therapeutic_area',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='study.TherapeuticArea', verbose_name='therapeutic area'),
        ),
    ]
